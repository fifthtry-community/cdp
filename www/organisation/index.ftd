-- ui.page: Organisation Data

-- ds.heading-large: Organisation

-- ds.heading-medium: cdp_org_company

Fields:

- name
- parent: if this company is a subsidiary of another company
- location: City/State/Country
- website (url)


-- ds.heading-medium: cdp_org_team

- name: name of the team
- company: company this team belongs to
- parent: if this team is a sub team of another team (company must be null in
  that case)
- manager: each team is managed by someone


-- ds.heading-medium: cdp_org_employee

- name: name of the employee
- employee_code: any company specific employee code
- team: what team the employee belongs to.


-- ds.heading-medium: cdp_org_meeting

SQL tables are not great for modelling compared to enum in Rust.

Option 1: For each variant we can create a column
   pro: simple table / queries
   pro: too many columns
   con: data can be invalid
Option 2: Create more tables (one table for each variant for every enum field)
   pro: data is always checked
   con: complex queries / performance issue due to that




- owner: FK to fastn_user table
- title: every meeting has a title
- kind: scheduled (time) | one off | recurring (slug, time) | permanent (slug)
  (we still allow people to join past scheduled / one off meeting?) yes.
- location-type: in-person | offline-call | video
- location: text field with value depending on type (google meet/zoom: then
  this field will contain the google meet / zoom url)
;; https://simonwillison.net/2024/Nov/27/storing-times-for-human-events/
- intended-time: eg 6pm
- intended-venue: (best location, that of event creator, esp for remote events)
- utc: utc time
- who-can-join: open | trusted | restricted (if URL can be shared or only
  allowed member, if anyone can then they may be put in lobby if lobby is true)



-- ds.heading-medium: cdp_org_meeting_attendant


/- employee: fk to employee table (even other company people should be added as employees)
- user: FK to user table (if the person is employee is a UI concern)
- role: owner | organiser | panel | guest
;; attended is de-normalised so we can quickly show who attended the meeeting
- attended: in seconds they attended the video
- forced-mute: if they are allowed to speak (this can change at run time)
- forced-video-off: if their video was forced to be off
- lobby: if they are in lobby
- approved: if approval was required (approved may be put in lobby as well)
- can-chat: if they are allowed to chat


-- ds.heading-medium: cdp_org_meeting_event

- meeting: fk to meeting table
- kind: meeting created | meeting setting changed | title-changed | started
  speaking | stopped speaking | agenda added | agenda selected | agenda marked
  completed | agenda marked come back later | note updated | action item created
  action item deleted etc etc
- who: who did this
- when: did they do it




-- end: ui.page
